# Generated by Django 4.0.2 on 2022-02-19 08:10

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locality', models.CharField(max_length=100)),
                ('address', models.TextField(max_length=200)),
                ('state', models.CharField(choices=[('kerala', 'kerala')], max_length=20)),
                ('district', models.CharField(choices=[('kozhikode', 'kozhikode')], max_length=20)),
                ('landmark', models.TextField(blank=True, max_length=200, null=True)),
                ('country', models.CharField(choices=[('india', 'india')], max_length=20)),
                ('default', models.BooleanField(default=False)),
                ('address_type', models.CharField(choices=[('home', 'home'), ('work', 'work')], max_length=20)),
            ],
            options={
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='AdminRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=20)),
                ('Created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'AdminRole',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=30)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Area',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Banners',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_name', models.CharField(max_length=100)),
                ('banner_url', models.URLField(max_length=100)),
                ('banner_image', models.FileField(upload_to='images/Banner')),
                ('app_banner_image', models.FileField(upload_to='images/Banner_app')),
                ('is_intermediate', models.BooleanField(default=True)),
                ('display_order', models.IntegerField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'Banner',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=100)),
                ('brand_image', models.ImageField(upload_to='images/brand')),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Brand',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Catogory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('catogory_name', models.CharField(max_length=100)),
                ('catogory_image', models.ImageField(upload_to='images/catogory')),
                ('display_order', models.IntegerField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.catogory')),
            ],
            options={
                'db_table': 'Catogory',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('username', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('phone', models.BigIntegerField()),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='images/profile')),
                ('registered_date', models.DateTimeField(auto_now_add=True)),
                ('password', models.CharField(max_length=20)),
                ('conf_password', models.CharField(max_length=20)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'Customer',
                'ordering': ['-registered_date'],
            },
        ),
        migrations.CreateModel(
            name='Offers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_name', models.CharField(max_length=100)),
                ('offer_image', models.ImageField(upload_to='images/offers')),
                ('offer_app_image', models.ImageField(upload_to='images/offers/app_image')),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], max_length=30)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Offers',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=250)),
                ('Description', ckeditor.fields.RichTextField(null=True)),
                ('Features', ckeditor.fields.RichTextField(default=None, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Pending', 'Pending'), ('Suspended', 'Suspended')], default='Active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('Product_Brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.brand')),
                ('Product_Category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.catogory')),
            ],
            options={
                'db_table': 'Products',
            },
        ),
        migrations.CreateModel(
            name='VarientType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varient_name', models.CharField(max_length=100)),
                ('display_order', models.IntegerField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Varient Type',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.BigIntegerField(null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.adminrole')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'CustomAdmin',
                'ordering': ['-Created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VarientValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varient_values', models.CharField(max_length=100)),
                ('display_order', models.IntegerField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('varient_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.varienttype')),
            ],
            options={
                'db_table': 'Varient Values',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Thumbnail_image', models.ImageField(null=True, upload_to='Products')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.product')),
            ],
            options={
                'db_table': 'Product_image',
            },
        ),
        migrations.CreateModel(
            name='Product_Varients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Sku_Code', models.CharField(max_length=100)),
                ('Selling_Prize', models.DecimalField(decimal_places=2, max_digits=12)),
                ('Display_Prize', models.DecimalField(decimal_places=2, max_digits=12)),
                ('Product_stock', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Pending', 'Pending'), ('Suspended', 'Suspended')], default='Active', max_length=20)),
                ('Product_Offers', models.ManyToManyField(blank=True, to='EcomAdmin.Offers')),
                ('Varient_Values', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.varientvalues')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.product')),
            ],
            options={
                'db_table': 'Product_Varients',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='Varient_Type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.varienttype'),
        ),
        migrations.CreateModel(
            name='Pincode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pincode', models.CharField(max_length=10)),
                ('postoffice', models.CharField(max_length=100)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=30)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.area')),
            ],
            options={
                'db_table': 'Pincode',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path_name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=20)),
                ('Created_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.path')),
            ],
            options={
                'db_table': 'Path',
                'ordering': ['-Created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orderid', models.CharField(max_length=100)),
                ('order_date', models.DateField(auto_now_add=True, null=True)),
                ('order_status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'Processing'), ('Shipped', 'Shipped'), ('Out for delivery', 'Out for delivery'), ('Delivered', 'Delivered')], default='Pending', max_length=20)),
                ('order_total', models.DecimalField(decimal_places=2, max_digits=20)),
                ('totalcount', models.CharField(max_length=50)),
                ('payment_mode', models.CharField(choices=[('COD', 'COD'), ('PAYMENT', 'PAYMENT')], max_length=20)),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Received', 'Received')], max_length=20)),
                ('platform', models.CharField(max_length=100)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.address')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.CharField(max_length=50)),
                ('order_total', models.DecimalField(decimal_places=2, max_digits=20)),
                ('order_date', models.DateField(auto_now_add=True)),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.orderdetails')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.product')),
            ],
        ),
        migrations.AddField(
            model_name='adminrole',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='EcomAdmin.Path'),
        ),
        migrations.AddField(
            model_name='address',
            name='pin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.pincode'),
        ),
        migrations.AddField(
            model_name='address',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='EcomAdmin.customer'),
        ),
    ]
